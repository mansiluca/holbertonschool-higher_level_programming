The ``print_square`` module
===============================

Using ``print_square`` module
-------------------------------

Import function from module:
    >>> print_square = __import__('4-print_square').print_square

Test normal case:
    >>> print_square(3)
    ###
    ###
    ###

Test basic functionality:
    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Test with size 0:
    >>> print_square(0)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Test with negative size:
    >>> print_square(-1)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Test size is float and less than zero:
    >>> print_square(-1.1)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test size is float but positive:
    >>> print_square(2.2)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test size is None:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test missing one argument:
    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'

Test with non-integer size:
    >>> print_square("4")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer