The ``matrix_divided`` module
===============================

Using ``matrix_divided`` module
-------------------------------

Import function from module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test basic division:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test division by zero:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Test non-numeric divisor:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, "a")
    Traceback (most recent call last):
        ...
    TypeError: divisor must be a number

Test non-numeric matrix element:
    >>> matrix = [[1, 2, 3], [4, '5', 6]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with rows of different sizes:
    >>> matrix = [[1, 2, 3], [4, 5]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Test empty matrix:
    >>> matrix = []
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    ValueError: matrix cannot be empty

Test matrix with single row:
    >>> matrix = [[1, 2, 3]]
    >>> matrix_divided(matrix, 2)
    [[0.5, 1.0, 1.5]]

Test matrix with single column:
    >>> matrix = [[1], [2], [3]]
    >>> matrix_divided(matrix, 2)
    [[0.5], [1.0], [1.5]]

Test matrix with negative numbers:
    >>> matrix = [[-1, -2, -3], [-4, -5, -6]]
    >>> matrix_divided(matrix, -2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

Test one element matrix:
    >>> matrix = [[2]]
    >>> matrix_divided(matrix, 2)
    [[1.0]]
Test very large numbers:
    >>> matrix = [[1000000, 2000000], [3000000, 4000000]]
    >>> matrix_divided(matrix, 1000000)
    [[1.0, 2.0], [3.0, 4.0]]
Test very small numbers:
    >>> matrix = [[0.001, 0.002], [0.003, 0.004]]
    >>> matrix_divided(matrix, 0.001)
    [[1.0, 2.0], [3.0, 4.0]]
Test division by infinity:
    >>> matrix = [[1, 2], [3, 4]]
    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]
Test matrix with infinity:
    >>> matrix = [[float('inf'), 2], [3, 4]]
    >>> matrix_divided(matrix, 2)
    [[inf, 1.0], [1.5, 2.0]]
Test matrix with NaN:
    >>> matrix = [[float('nan'), 2], [3, 4]]
    >>> result = matrix_divided(matrix, 2)
    >>> for row in result:
    ...     for item in row:
    ...         if item != item:  # Check for NaN
    ...             print("NaN", end=" ")
    ...         else:
    ...             print(item, end=" ")
    NaN 1.0 1.5 2.0
Test matrix with zero elements:
    >>> matrix = [[0, 0], [0, 0]]
    >>> matrix_divided(matrix, 5)
    [[0.0, 0.0], [0.0, 0.0]]
Test missing one argument:
    >>> matrix = [[1, 2], [3, 4]]
    >>> matrix_divided(matrix)
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
Test empty nested list:
    >>> matrix = [[], []]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
Passing a tuple as an argument:
    >>> matrix_divided((3, 6, 9), 3)
    Traceback (most recent call last):
    	      ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
Dividing a matrix which its elements aren't integer/float numbers:
    >>> matrix_divided([["Hello", "World"], ["Hello", "Holberton"]], 10)
    Traceback (most recent call last):
     	       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
Dividing a matrix which its elements aren't integer/float numbers 2:
    >>> matrix_divided([["1"], ["2", "3"], ["5", "6", "7"]], 10)
    Traceback (most recent call last):
    	      ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
Passing div as a string
    >>> matrix_divided([[10, 50], [30, 20]], "10")
    Traceback (most recent call last):
    	      ...
    TypeError: div must be a number
Passing div as a list
    >>> matrix_divided([[5.7, 8.1], [7.7, 4.9]], [2])
    Traceback (most recent call last):
    	      ...
    TypeError: div must be a number